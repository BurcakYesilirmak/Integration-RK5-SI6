#include<stdio.h>
#include<math.h>
#include <time.h>
#include <time.h>
#define C 134217729 
int FCOUNT;

  typedef struct {
   double  xh[3], xl[3];
   double  ah[3], al[3]; 
  } value;


  // Functions of Accurate Arithmetic Operations:
 void VeltkampSplit(double x, double *xh, double *xl)   {        
    double p = C * x;
    double q = x - p;
    *xh = p + q; 
    *xl = x - *xh;                                      }


 void F2Sum(double a, double b,double *xh, double *xl)  {
    double z;
    *xh= a+b;
    z = *xh-a;
    *xl= b-z;                                           }


 void TwoSum(double a, double b,double *xh, double *xl) {
    double a1 ,b1 ,del_a ,del_b;
    *xh= a+b;
    a1= *xh-b;
    b1= *xh-a1;
    del_a = a-a1;
    del_b = b-b1;
    *xl = del_a+del_b;                                   }

  //Pichat and Neumaierâ€™s summation algorithm
 void Summation2(double xh1, double xl1, double xh2, double xl2,double *xh3, double *xl3 ){  
    double t,s,u,v,z;
    TwoSum(xh1, xh2, &t, &s);
    TwoSum(xl1, xl2, &u, &v);
    z= v+s+u; 
    //F2Sum(t, z, xh3, xl3);
    *xh3=t;
    *xl3=z;                                                                               }   

  // Dekker's & Polynomial Multiplication
 void Mult(double xh1, double xl1, double xh2, double xl2,double *t, double *z) {
    double xh_1, xl_1, xh_2, xl_2, xh3, xl3;
    VeltkampSplit(xh1, &xh_1, &xl_1); 
    VeltkampSplit(xh2, &xh_2, &xl_2); 
    xh3 =  xh1*xh2;
    xl3 =  xh_1*xh_2 - xh3;
    xl3 +=  xh_1*xl_2;
    xl3 +=  xl_1*xh_2;
    xl3 +=  xl_1*xl_2+ xl1*xh2 + xh1*xl2+ xl1*xl2;
    //F2Sum(xh3, xl3, t, z);
    *t= xh3 ;
    *z = xl3;
    return;                                                                     }

 void Division(double xh1, double xl1, double xh2, double xl2,double *xh3, double *xl3){
    double u1, u0, t, z;
    t =xh1/xh2;
    Mult(t, 0, xh2, 0, &u0, &u1); 
    z = xh1- u0;
    z -= u1;
    z += xl1;
    z -= t * xl2;
    z /= xh2;  
    *xh3= t;
    *xl3= z;
    //F2Sum(t, z, xh3, xl3);
    return; } 
 
 // the square of the vector's itself
  void square_product(double xh[3], double xl[3],double *xh3, double *xl3) {        
      double u0, u1, v0, v1, t0, t1 ,t2, t3;
      Mult(xh[0], xl[0], xh[0], xl[0], &u0, &u1); // xh^2 & xl^2
      Mult(xh[1], xl[1], xh[1], xl[1], &v0, &v1); // yh^2 & yl^2
      Mult(xh[2], xl[2], xh[2], xl[2], &t0, &t1); // zh^2 & zl^2
      Summation2(u0, u1, v0, v1, &t2, &t3);
      Summation2(t0, t1, t2, t3, xh3, xl3);                               }

  void SquareRoot(double R_h[3], double R_l[3], double *xh3, double *xl3)  {  //as pairs
      double y0, y1;
      double p0, p1, t4, t5;

     square_product(R_h, R_l, &t4, &t5);
     y0 = sqrt(t4);                          //starting point to the square root 
     Mult(y0, 0, y0, 0, &p0, &p1); 
     y1 = t4 - p0;
     y1 -= p1;
     y1 += t5 ;
     if(y0<0) { 
     printf("error \n"); }
     y1 = (y1 / y0)*0.5;                   // y0 and y1 are pairs of the square root operation
     *xh3= y0;                             // Mult(y0, y1, t4, t5, xh3, xl3);    // k^2*sqrt(k)    
     *xl3= y1;                                                            } 

  //fukushima
 /* void Summation2(double xh1, double xl1, double xh2, double xl2,double *xh3, double *xl3 ){  
 double v1, v2, w1, w2;
   w1 = xh1 + xh2;
  if ( fabs (xh1)> fabs (xh2)) {
     w2 = xh1-w1;
     w2 += xh2;
     w2 += xl2;
     w2 += xl1;                 }
  else             {
    w2 = xh2-w1;
     w2 += xh1;
     w2 += xl1;
     w2 += xl2;    }
    v1 = w1+w2;
    *xh3 = v1;
    *xl3 = (w1-v1)+w2;    }  
  
   // Fukushima
  void Division(double xh1, double xl1, double xh2, double xl2, double *xh3, double *xl3){
  double p, q, t, t2, v1, v2, k; 
  double hw, tw, hy, ty; 
  t = xh1/xh2;
    VeltkampSplit( t,  &hw, &tw); 
    VeltkampSplit(xh2, &hy, &ty); 
  p = hw*hy;
  q = hw*ty + tw*hy;
  v1 = p+q;
  v2 = ((p-v1)+q)+tw*ty;
  t2=((((xh1-v1)-v2)+xl1)-t*xl2)/xh2;
  k = t+t2;
  *xh3 = k;
  *xl3 = (t- *xh3)+t2; 
  return;
  }     

     // fukushima
    void Mult(double xh1, double xl1, double xh2, double xl2,double *xh3, double *xl3) {
    double p, q, w1, w2, z, k;
    double xh_1, xl_1, xh_2, xl_2;
    VeltkampSplit(xh1, &xh_1, &xl_1); 
    VeltkampSplit(xh2, &xh_2, &xl_2); 
    z= xl1*xh2 + xh1*xl2;
    p=xh_1*xh_2;
    q=xh_1*xl_2+xl_1*xh_2;
     w1  =  p+q ;
     w2  =  p - w1;
     w2 +=  q;
     w2 +=  xl_1*xl_2 + z;
     k = w1+w2;
     *xh3 = k;
     *xl3 = (w1-k)+w2;
    return;
    }            

     // the square of the vector's itself
  void square_product(double xh[3], double xl[3],double *xh3, double *xl3) {        
      double u0, u1, v0, v1, t0, t1 ,t2, t3;
      Mult(xh[0], xl[0], xh[0], xl[0], &u0, &u1); // xh^2 & xl^2
      Mult(xh[1], xl[1], xh[1], xl[1], &v0, &v1); // yh^2 & yl^2
      Mult(xh[2], xl[2], xh[2], xl[2], &t0, &t1); // zh^2 & zl^2
      Summation2(u0, u1, v0, v1, &t2, &t3);
      Summation2(t0, t1, t2, t3, xh3, xl3);                               }       
    
      // fukushima
  void SquareRoot(double R_h[3], double R_l[3], double *xh3, double *xl3)  {              //as pairs
  double w1, w2, p, q, v1, v2, x1, x2, hw, tw; 
     square_product(R_h, R_l, &x1, &x2);
     w1 = sqrt(x1);                          //starting point to the square root 
     VeltkampSplit(w1, &hw, &tw); 
     p = hw*hw;
     q = hw*tw*2.0;
     v1 = q+p;
     v2 = ((p-v1)+q)+tw*tw;
     w2 = (((x1-v1)-v2)+x2)/(2.0*w1);
     *xh3 = w1+w2;
     *xl3= (w1-*xh3)+w2;                                                            }  */

   void scalar_product(double xh[3], double xl[3],double yh[3], double yl[3], double *xh3, double *xl3) { 
      double u0, u1, v0, v1, t0, t1 ,t2, t3;
      Mult(xh[0], xl[0], yh[0], yl[0], &u0, &u1); // X^2
      Mult(xh[1], xl[1], yh[1], yl[1], &v0, &v1); // Y^2
      Mult(xh[2], xl[2], yh[2], yl[2], &t0, &t1); // Z^2
      Summation2(u0, u1, v0, v1, &t2, &t3);
      Summation2(t0, t1, t2, t3, xh3, xl3);                                                             }

   void semimajor_eccentricity(double rh[3], double rl[3], double vh[3], double vl[3], double *a, double *e) {

   double sc_h, sc_l, sc_h2, sc_l2, norm_rh, norm_rl, norm_vh, norm_vl;
   double div1, div2, div3, div4, div5, div6;
   double mult_h1, mult_l1, mult_h2, mult_l2, mult_h3, mult_l3;
   double mult_h4, mult_l4, mult_h5, mult_l5, mult_h6, mult_l6;
   double sum1, sum2, sum3, sum4, sum5, sum6, sum7, sum8;
   double div_h, div_l, div_h1, div_l1, sum_h2, sum_l2;
   double mu_h=2.9619474286664206E-04, mu_l=-0.0000000000000000497815544e-4; // Gravitational Parameters
   
   //Mult(k_h, k_l, k_h, k_l, &kh, &kl); 
   scalar_product(vh, vl, vh, vl, &sc_h, &sc_l);        // v.v = v1
   scalar_product(rh, rl, vh, vl, &sc_h2, &sc_l2);      // r.v = d1
   SquareRoot(rh, rl, &norm_rh, &norm_rl);              // norm_r
   SquareRoot(vh, vl, &norm_vh, &norm_vl);              // norm_v

   Division(sc_h, sc_l, mu_h, mu_l, &div3, &div4);      //  v1/k^2 
   Division(1.0, 0, norm_rh, norm_rl, &div1, &div2);    //  1/norm_r

   Summation2(div3, div4, -div1, -div2, &sum1, &sum2);  //  var1= (v1/k^2)-1/norm_r
   Division(sc_h2, sc_l2, mu_h, mu_l, &div5, &div6);    //  var2=  d1/k^2      

   Mult(rh[0], rl[0], sum1, sum2, &mult_h1, &mult_l1);  //  r_vec[]*var1
   Mult(rh[1], rl[1], sum1, sum2, &mult_h2, &mult_l2);
   Mult(rh[2], rl[2], sum1, sum2, &mult_h3, &mult_l3);

   Mult(vh[0], vl[0], div5, div6, &mult_h4, &mult_l4);  //  v_vec[]*var2
   Mult(vh[1], vl[1], div5, div6, &mult_h5, &mult_l5);
   Mult(vh[2], vl[2], div5, div6, &mult_h6, &mult_l6);

   Summation2(mult_h1, mult_l1, -mult_h4, -mult_l4, &sum3, &sum4); // x
   Summation2(mult_h2, mult_l2, -mult_h5, -mult_l5, &sum5, &sum6); // y
   Summation2(mult_h3, mult_l3, -mult_h6, -mult_l6, &sum7, &sum8); // z 
   double sum_h[]= {sum3, sum5, sum7}, sq_h;
   double sum_l[]= {sum4, sum6, sum8}, sq_l;
   SquareRoot(sum_h, sum_l, &sq_h, &sq_l);              // ecc_h, ecc_l => sqrt(x^2+y^2+z^2)

    // semi-major axis = 1 / ((2.0/norm_r) - v1/k2);
    Division(2.0, 0.0, norm_rh, norm_rl, &div_h, &div_l); 
    Summation2(div_h, div_l, -div3, -div4, &sum_h2, &sum_l2); 
    Division(1.0, 0.0, sum_h2, sum_l2, &div_h1, &div_l1); 
    a[0]= div_h1;
    a[1]= div_l1;
    e[0]= sq_h;
    e[1]= sq_l;
   }
   
   void energies(double rh[3], double rl[3], double vh[3], double vl[3], double *energy, double *angmomentum){
      double norm_rh, norm_rl, sc_h, sc_l;
      double ek_h, ek_l, pot_h, pot_l, mech_h, mech_l;
      double mulh, mull, mulh1, mull1, mulh2, mull2;
      double mulh3, mull3, mulh4, mull4, mulh5, mull5; 
      double sumh, suml, sumh1, suml1, sumh2, suml2;
      double mu_h=2.9619474286664206E-04, mu_l=-0.0000000000000000497815544e-4; // Gravitational Parameters
      
      // kinetic and potential energies:
      scalar_product(vh, vl, vh, vl, &sc_h, &sc_l); // v.v
      SquareRoot(rh, rl, &norm_rh, &norm_rl); //norm_r
      Mult(sc_h, sc_l, 0.5, 0.0, &ek_h, &ek_l);
      Division(mu_h, mu_l, norm_rh, norm_rl, &pot_h, &pot_l);
      Summation2( ek_h, ek_l, -pot_h, -pot_l, &mech_h, &mech_l);
      
      // angular momentum: 
                         // i = R1*V2-R2V1 
      Mult(rh[1], rl[1], vh[2], vl[2], &mulh, &mull);
      Mult(rh[2], rl[2], vh[1], vl[1], &mulh1, &mull1);
      Summation2(mulh, mull, -mulh1, -mull1, &sumh, &suml);

                         // j = R2*V0-R0V2 
      Mult(rh[2], rl[2], vh[0], vl[0], &mulh2, &mull2);
      Mult(rh[0], rl[0], vh[2], vl[2], &mulh3, &mull3);
      Summation2(mulh2, mull2, -mulh3, -mull3, &sumh1, &suml1);

                          // k = R0*V1-R1V0 
      Mult(rh[0], rl[0], vh[1], vl[1],  &mulh4, &mull4);
      Mult(rh[1], rl[1], vh[0], vl[0],  &mulh5, &mull5);
      Summation2(mulh4, mull4, -mulh5, -mull5, &sumh2, &suml2);
   
       // ang_h, ang_l => sqrt(i^2 + j^2 + k^2) :
      double sumh3[]= {sumh, sumh1, sumh2}, sq_h;
      double suml3[]= {suml, suml1, suml2}, sq_l;
          SquareRoot(sumh3, suml3, &sq_h, &sq_l); 
     
      //results:
      energy[0]= mech_h;
      energy[1]= mech_l;
      angmomentum[0]= sq_h;
      angmomentum[1]=sq_l;
    } 

    void accelaration(double rh[3], double rl[3], double *ah, double *al){
      double xh1, xl1, sc_h1, sc_l1, sc_h2, sc_l2, sc_h3, sc_l3, x, y;
      double mu_h=2.9619474286664206E-04, mu_l=-0.0000000000000000497815544e-4; // gravitational parameters

      // [ -mu/(x^2+y^2+z^2)^3/2 ]* R  
      square_product(rh, rl, &sc_h1, &sc_l1);             // k = y[0]*y[0]+y[1]*y[1]+y[2]*y[2] 
      SquareRoot(rh, rl, &sc_h2, &sc_l2);                 // sqrt(k) 
      Mult(sc_h1, sc_l1, sc_h2, sc_l2, &sc_h3, &sc_l3);  // k*sqrt(k)
      Division(mu_h, mu_l, sc_h3, sc_l3, &xh1, &xl1); 
      Mult(xh1, xl1, -1.0, 0.0, &x, &y);

       for(int i=0; i<3; i++)   {
         Mult(x, y, rh[i], rl[i], &ah[i], &al[i]);                                                                       
         FCOUNT++;                                                      } }   

    // Fukushima Symplectic
    void sym_fukushima(double rh[3], double rl[3], double Vh[3], double Vl[3], double dt, double dtl) {
   double ch1, ch2, ch3, ch4, ch5, ch6, ch7, ch8, ch9, ch10;
   double cl1, cl2, cl3, cl4, cl5, cl6, cl7, cl8, cl9, cl10;
   double ch11, cl11, ch12, cl12, ch13, cl13, ch14, cl14;
   double ah1[3], ah2[3], ah3[3], ah4[3], ah5[3], ah6[3], ah7[3];
   double al1[3], al2[3], al3[3], al4[3], al5[3], al6[3], al7[3];
   double bh1 =  0.784513610477560,  bl1= 3.608171852e-17;
   double bh2 = 0.235573213359357,   bl2= 7.86407102e-18;
   double bh3 = -1.177679984178870,  bl3= 9.843241231e-17;  
   double bh4 = 1.315186320683906,   bl4= -6.271179877e-17;
   double dh1 = 0.3922568052387800,  dl1= 1.804085925e-17;
   double dh2 = 0.5100434119184585,  dl2= 2.197289477e-17;
   double dh3 = -0.4710533854097565, dl3= -2.36290957e-18;  
   double dh4 = 0.0687531682525180,  dl4= 3.98251896e-18;
   int i;
    value inp[40];

        // r_temp[i] = r[i] + dt*d1*v[i]; 
        for(i=0; i<3; i++)                                          {
        Mult(dt, dtl, dh1, dl1, &ch1, &cl1);
        Mult(ch1, cl1, Vh[i], Vl[i], &inp[0].xh[i], &inp[0].xl[i]);                
        Summation2(inp[0].xh[i], inp[0].xl[i], rh[i], rl[i], &inp[1].xh[i], &inp[1].xl[i]);   }    
        
        //  v_temp1[i] = v[i] + dt*b1*a1[i]; 
        accelaration(inp[1].xh, inp[1].xl, ah1, al1);
        for(i=0; i<3; i++)                                            {
        Mult(bh1, bl1, dt,  dtl, &ch2, &cl2); 
        Mult(ch2, cl2, ah1[i], al1[i], &inp[3].xh[i], &inp[3].xl[i]); 
        Summation2(Vh[i], Vl[i], inp[3].xh[i], inp[3].xl[i], &inp[4].xh[i], &inp[4].xl[i]);

        // r_temp1[i] = r_temp[i] + dt*d2*v_temp1[i];
        Mult(dh2, dl2, dt, dtl, &ch3, &cl3);
        Mult(ch3, cl3, inp[4].xh[i], inp[4].xl[i], &inp[5].xh[i], &inp[5].xl[i]);                  
        Summation2(inp[5].xh[i], inp[5].xl[i], inp[1].xh[i], inp[1].xl[i], &inp[6].xh[i], &inp[6].xl[i]);  }    

       //  v_temp2[i] = v_temp1[i] + dt*b2*a2[i]; 
        accelaration(inp[6].xh, inp[6].xl, ah2, al2);
        for(i=0; i<3; i++)                                            {
        Mult(bh2, bl2, dt,  dtl, &ch4, &cl4); 
        Mult(ch4, cl4, ah2[i], al2[i],  &inp[8].xh[i], &inp[8].xl[i]); 
        Summation2(inp[4].xh[i], inp[4].xl[i], inp[8].xh[i], inp[8].xl[i], &inp[9].xh[i], &inp[9].xl[i]);

        // r_temp2[i] = r_temp1[i] + dt*d3*v_temp2[i];  
        Mult(dh3, dl3, dt, dtl, &ch5, &cl5);
        Mult(ch5, cl5, inp[9].xh[i], inp[9].xl[i], &inp[10].xh[i], &inp[10].xl[i]);                 
        Summation2(inp[10].xh[i], inp[10].xl[i], inp[6].xh[i], inp[6].xl[i], &inp[11].xh[i], &inp[11].xl[i]);  }   

       //  v_temp3[i] = v_temp2[i] + dt*b3*a3[i];
        accelaration(inp[11].xh, inp[11].xl, ah3, al3);
        for(i=0; i<3; i++)                                            {
        Mult(bh3, bl3, dt,  dtl, &ch6, &cl6); 
        Mult(ch6, cl6, ah3[i], al3[i],  &inp[13].xh[i], &inp[13].xl[i]); 
        Summation2(inp[13].xh[i], inp[13].xl[i], inp[9].xh[i], inp[9].xl[i], &inp[14].xh[i], &inp[14].xl[i]);

        // r_temp3[i] = r_temp2[i] + dt*d4*v_temp3[i];  
        Mult(dh4, dl4, dt, dtl, &ch7, &cl7);
        Mult(ch7, cl7, inp[14].xh[i], inp[14].xl[i], &inp[15].xh[i], &inp[15].xl[i]);                 
        Summation2(inp[15].xh[i], inp[15].xl[i], inp[11].xh[i], inp[11].xl[i], &inp[16].xh[i], &inp[16].xl[i]);  }      

        // v_temp4[i] = v_temp3[i] + dt*b4*a4[i];
        accelaration(inp[16].xh, inp[16].xl, ah4, al4);
        for(i=0; i<3; i++)                                            {
        Mult(bh4, bl4, dt, dtl, &ch8, &cl8); 
        Mult(ch8, cl8, ah4[i], al4[i],  &inp[18].xh[i], &inp[18].xl[i]); 
        Summation2(inp[18].xh[i], inp[18].xl[i], inp[14].xh[i], inp[14].xl[i], &inp[19].xh[i], &inp[19].xl[i]);

        // r_temp4[i] = r_temp3[i] + dt*d4*v_temp4[i];
      //  Mult(dh4, dl4, dt, dtl, &ch7, &cl7);
        Mult(ch7, cl7, inp[19].xh[i], inp[19].xl[i], &inp[20].xh[i], &inp[20].xl[i]);                 
        Summation2(inp[20].xh[i], inp[20].xl[i], inp[16].xh[i], inp[16].xl[i], &inp[21].xh[i], &inp[21].xl[i]);  }     


        // v_temp5[i] = v_temp4[i] + dt*b3*a5[i];
        accelaration(inp[21].xh, inp[21].xl, ah5, al5);
        for(i=0; i<3; i++)                                            {
        Mult(bh3, bl3, dt,  dtl, &ch9, &cl9); 
        Mult(ch9, cl9, ah5[i], al5[i],  &inp[23].xh[i], &inp[23].xl[i]); 
        Summation2(inp[23].xh[i], inp[23].xl[i], inp[19].xh[i], inp[19].xl[i], &inp[24].xh[i], &inp[24].xl[i]);

        //  r_temp5[i] = r_temp4[i] + dt*d3*v_temp5[i]; 
        Mult(dh3, dl3, dt, dtl, &ch10, &cl10);
        Mult(ch10, cl10, inp[24].xh[i], inp[24].xl[i], &inp[25].xh[i], &inp[25].xl[i]);                 
        Summation2(inp[25].xh[i], inp[25].xl[i], inp[21].xh[i], inp[21].xl[i], &inp[26].xh[i], &inp[26].xl[i]);  }              

        // v_temp6[i] = v_temp5[i] + dt*b2*a6[i];
        accelaration(inp[26].xh, inp[26].xl, ah6, al6);
        for(i=0; i<3; i++)                                            {
        Mult(bh2, bl2, dt,  dtl, &ch11, &cl11); 
        Mult(ch11, cl11, ah6[i], al6[i], &inp[28].xh[i], &inp[28].xl[i]); 
        Summation2(inp[28].xh[i], inp[28].xl[i], inp[24].xh[i], inp[24].xl[i], &inp[29].xh[i], &inp[29].xl[i]);

        // r_temp6[i] = r_temp5[i] + dt*d2*v_temp6[i]; 
        Mult(dh2, dl2, dt, dtl, &ch12, &cl12);
        Mult(ch12, cl12, inp[29].xh[i], inp[29].xl[i], &inp[30].xh[i], &inp[30].xl[i]);                 
        Summation2(inp[30].xh[i], inp[30].xl[i], inp[26].xh[i], inp[26].xl[i], &inp[31].xh[i], &inp[31].xl[i]);  }     

       //  v[i] = v_temp6[i] + dt*b1*a7[i];
        accelaration(inp[31].xh, inp[31].xl, ah7, al7);
        for(i=0; i<3; i++)                                            {
        Mult(bh1, bl1, dt,  dtl, &ch13, &cl13); 
        Mult(ch13, cl13, ah7[i], al7[i],  &inp[33].xh[i], &inp[33].xl[i]); 
        Summation2(inp[33].xh[i], inp[33].xl[i], inp[29].xh[i], inp[29].xl[i], &Vh[i], &Vl[i]);

        // r[i] = r_temp6[i] + dt*d1*v[i];
        Mult(dh1, dl1, dt, dtl, &ch14, &cl14);
        Mult(ch14, cl14, Vh[i], Vl[i], &inp[34].xh[i], &inp[34].xl[i]);                 
        Summation2(inp[34].xh[i], inp[34].xl[i], inp[31].xh[i], inp[31].xl[i], &rh[i], &rl[i]);  } }                                                     
        
    int main() {
      double t, dt, T, EKP[2], ANGM[2], a[2], e[2]; 

      //  r[3]={Xh,Yh,Zh} rl[3]={Xl,Yl,Zl}  V[3]={Vxh,Vyh,Vzh} V[3]={Vxl,Vyl,Vzl} 
      // DATA: NASA HORIZON https://ssd.jpl.nasa.gov/horizons/app.html#/
      // JUPITER INITIAL VECTORS 2018-Jun-28

       double  r[]= {-3.460167504309613E+00, -4.149454064629457E+00,  9.465721330038770E-02}; 
       double  v[]= {5.709741990408655E-03,  -4.481465873394258E-03, -1.091471606521913E-04};
       double rl[]= {-0.0000000000000000486257802e+00, -0.0000000000000001269077053e+00, -0.0000000000000004757454799e-2}; 
       double vl[]= {-0.0000000000000002100430652e-3,   0.0000000000000004062370784e-3,   0.0000000000000000152006560e-4};

    T=  2*M_PI*1000;
    dt= 1e-2;
    double dtl=-2.08166817e-19;
      // error measure with long double 
      long double  A=  5.20273584355200957629L;       // semi-major axis lenght
      long double EC=  4.88056797545033895064e-02L;   // eccentricity 
      long double  E= -2.84652874731022392836e-05L;   // mechanical energy of system
      long double  H=  3.92090843714996407606e-02L;   // angular momentum of system
    // to store the execution time of code
      double time_spent = 0.0;
 
      clock_t begin = clock();
        FILE *kk, *pp;
      //  pp=fopen("sym_6th_accurate_pos.txt","w");
        kk=fopen("sym_6th_accurate_energy.txt","w");
        t=0.0 ;   
        int Count=0.0;

        while ( t <= T )  {    
        sym_fukushima(r, rl, v, vl, dt, dtl);                        
        energies(r, rl, v, vl, EKP, ANGM);              // energies
        semimajor_eccentricity(r, rl, v, vl, a, e);     // orbital elements

        long double energy= (EKP[0]-E+EKP[1])/E;
        long double angmomentum = (ANGM[0]-H+ANGM[1])/H;

      //  fprintf(pp,"%d %.20lf %.20lf %.20lf %.20lf %.20lf %.20lf \n", Count, r[0], rl[0], r[1], rl[1], r[2], rl[2]);
        fprintf(kk,"%.3lf %d %.15Le %.15Le %.15Le %.15Le\n", t, FCOUNT, (a[0]-A+a[1])/A, (e[0]-EC+e[1])/EC, energy, angmomentum);                                                                  
        t +=dt;
        Count++;
        }
        
         clock_t end = clock();
        fclose(kk);
        fclose(pp);
      // calculate elapsed time by finding difference (end - begin) and
      // dividing the difference by CLOCKS_PER_SEC to convert to seconds
    time_spent += (double)(end - begin) / CLOCKS_PER_SEC;
 
    printf("The elapsed time is %f seconds", time_spent);
        return (0);  
        }
